import argparse
import numpy as np
from scipy import sparse
from scipy.sparse.linalg import svds
import matplotlib.pyplot as plt
import collections

"""Helper functions for analysis"""
def drawLogLogPlot(filename, xvalues, yvalues, title='figure', xlabel='x_label', ylabel='y_label'):
    """Draws log-log plot then save as image"""
    plt.figure()
    plt.xscale('log')
    plt.yscale('log')
    plt.scatter(xvalues, yvalues)
    plt.title(title)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.savefig(filename)
    plt.close()
    
def getSingularValues(mat, k=100):
    """Returns top-k singular values in decreasing order"""
    _1, s, _2 = svds(sparse.coo_matrix(mat).asfptype(), k=k, tol=1e-6, which='LM')
    return sorted(s.tolist(), reverse=True)

def analyzeInDegrees(mat):
    ### TODO: WRITE YOUR CODE HERE. ############################################
    mat = mat.toarray()
    indeg_vec = np.sum(mat, axis=0).tolist()
    counter = collections.Counter(indeg_vec)
    sorted_counter = sorted(counter.items())
    xs, ys = list(zip(*sorted_counter))
    xs, ys = np.array(xs), np.array(ys)
    # print(f'matrix size: {mat.shape}, maximum degree: {mat.sum(0).max()}, {mat.sum(1).max()}, total number of edges: {mat.sum()}')
    ############################################################################
    drawLogLogPlot('indeg.png', xs, ys)
    pass
    

def analyzeOutDegrees(mat):
    ### TODO: WRITE YOUR CODE HERE. ############################################
    mat = mat.toarray()
    indeg_vec = np.sum(mat, axis=1).tolist()
    counter = collections.Counter(indeg_vec)
    sorted_counter = sorted(counter.items())
    xs, ys = list(zip(*sorted_counter))
    xs, ys = np.array(xs), np.array(ys)
    ############################################################################
    drawLogLogPlot('outdeg.png', xs, ys)
    pass
    
def analyzeSingularValues(mat):
    ### TODO: WRITE YOUR CODE HERE. ############################################
    k = 100
    drawLogLogPlot('svd.png', (np.arange(k) + 1).tolist(), getSingularValues(mat, k=k))
    pass
    ############################################################################

if __name__ == '__main__':
    """
    Analyzing a graph generated by R-MAT.
    positional arguments:
        INPUT       The file name of an input matrix

    Example:
        python analysis.py example.npz
    """
    parser = argparse.ArgumentParser(description='Analyzing a graph generated by R-MAT.')
    parser.add_argument("input", metavar="INPUT", type=str, default='example.npz',
                        help="The file name of an input matrix")
    args = parser.parse_args()
    
    # Validation for inputs. DO *NOT* MODIFY THIS PART!
    valid = True
    if type(args.input) != str or len(args.input) == 0:
        print('ERROR: You should specify the path of an input matrix.')
        valid = False
    if not valid:
        print('ERROR: Validation for inputs failed. Please check your code again.')
        exit(0)
    
    try:
        matrix = sparse.load_npz(args.input)
    except:
        print('ERROR: An error occurred while reading the input.')
        exit(0)
    
    analyzeInDegrees(matrix)
    analyzeOutDegrees(matrix)
    analyzeSingularValues(matrix)